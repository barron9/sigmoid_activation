#PERCEPTRON (ONE INPUT , SINGLE NEURON, THEN OUTPUT (NO OUTPUT NEURON))

import numpy as np

input=np.array([[1,0,1],
                [1,1,1],
                [1,.4,.2]])

weights=np.array([[.0051],
                  [.0021],
                  [.0011]])

print(input@weights) #  Î£ sypansis output to whole (single) neuron from input
                     #  weights have 3,1 dimensions
                     #  input has 1,3 dimensions
                     #  output is 1,1 dimensions output
output=input@weights

#MULTIPLE NEURON PERCEPTION
def sigmoid(x):
    return (1 / (1 + np.exp(-x)))
def derivative_sigmoid(x):
    return x*(1-x)
def train(input,output,weights_to_neuron_one,weights_to_neuron_two):
    output_of_neuron_one = sigmoid(input@weights_to_neuron_one)
    output_of_neuron_two = sigmoid(input@weights_to_neuron_two)
    error1=(output.T-output_of_neuron_one)#error1
    error2=(output.T-output_of_neuron_two)#error1
    #print("drv_sg")
    #print( error1 )
    #print(output_of_neuron_one)
    #print( derivative_sigmoid(output_of_neuron_one))
    weights_to_neuron_one +=np.dot(input.T , ( error1 * derivative_sigmoid(output_of_neuron_one) )) #chain rule
    weights_to_neuron_two +=np.dot(input.T , ( error2 * derivative_sigmoid(output_of_neuron_two) ))
    print(error1.T)
input=np.array([[1,0,1],
                [1,1,1],
                [1,0,0]])

weights_to_neuron_one=np.array([[.1071],
                                [.1021],
                                [.1101]])
weights_to_neuron_two=np.array([[.0151],
                               [.1031],
                               [.2011]])

expectedoutput=np.array([[0,0,1]])
for x in range(1000):
    train(input,expectedoutput,weights_to_neuron_one,weights_to_neuron_two)

print(sigmoid(np.array([[1,0,0]])@weights_to_neuron_one))
